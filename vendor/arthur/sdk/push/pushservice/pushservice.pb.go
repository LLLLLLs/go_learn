// Code generated by protoc-gen-go.
// source: protos/pushservice.proto
// DO NOT EDIT!

/*
Package pushservice is a generated protocol buffer package.

It is generated from these files:
	protos/pushservice.proto

It has these top-level messages:
	PushRequest
	PushReply
*/
package pushservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 推送消息
type PushRequest struct {
	Data string `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *PushRequest) Reset()                    { *m = PushRequest{} }
func (m *PushRequest) String() string            { return proto.CompactTextString(m) }
func (*PushRequest) ProtoMessage()               {}
func (*PushRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PushRequest) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type PushReply struct {
	Code int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Info string `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
}

func (m *PushReply) Reset()                    { *m = PushReply{} }
func (m *PushReply) String() string            { return proto.CompactTextString(m) }
func (*PushReply) ProtoMessage()               {}
func (*PushReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PushReply) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *PushReply) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func init() {
	proto.RegisterType((*PushRequest)(nil), "pushservice.PushRequest")
	proto.RegisterType((*PushReply)(nil), "pushservice.PushReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PushService service

type PushServiceClient interface {
	//
	PushAction(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushReply, error)
	ConnService(ctx context.Context, opts ...grpc.CallOption) (PushService_ConnServiceClient, error)
}

type pushServiceClient struct {
	cc *grpc.ClientConn
}

func NewPushServiceClient(cc *grpc.ClientConn) PushServiceClient {
	return &pushServiceClient{cc}
}

func (c *pushServiceClient) PushAction(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushReply, error) {
	out := new(PushReply)
	err := grpc.Invoke(ctx, "/pushservice.PushService/PushAction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushServiceClient) ConnService(ctx context.Context, opts ...grpc.CallOption) (PushService_ConnServiceClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PushService_serviceDesc.Streams[0], c.cc, "/pushservice.PushService/ConnService", opts...)
	if err != nil {
		return nil, err
	}
	x := &pushServiceConnServiceClient{stream}
	return x, nil
}

type PushService_ConnServiceClient interface {
	Send(*PushRequest) error
	Recv() (*PushReply, error)
	grpc.ClientStream
}

type pushServiceConnServiceClient struct {
	grpc.ClientStream
}

func (x *pushServiceConnServiceClient) Send(m *PushRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pushServiceConnServiceClient) Recv() (*PushReply, error) {
	m := new(PushReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for PushService service

type PushServiceServer interface {
	//
	PushAction(context.Context, *PushRequest) (*PushReply, error)
	ConnService(PushService_ConnServiceServer) error
}

func RegisterPushServiceServer(s *grpc.Server, srv PushServiceServer) {
	s.RegisterService(&_PushService_serviceDesc, srv)
}

func _PushService_PushAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServiceServer).PushAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pushservice.PushService/PushAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServiceServer).PushAction(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushService_ConnService_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PushServiceServer).ConnService(&pushServiceConnServiceServer{stream})
}

type PushService_ConnServiceServer interface {
	Send(*PushReply) error
	Recv() (*PushRequest, error)
	grpc.ServerStream
}

type pushServiceConnServiceServer struct {
	grpc.ServerStream
}

func (x *pushServiceConnServiceServer) Send(m *PushReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pushServiceConnServiceServer) Recv() (*PushRequest, error) {
	m := new(PushRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PushService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pushservice.PushService",
	HandlerType: (*PushServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushAction",
			Handler:    _PushService_PushAction_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConnService",
			Handler:       _PushService_ConnService_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protos/pushservice.proto",
}

func init() { proto.RegisterFile("protos/pushservice.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 174 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x28, 0x28, 0xca, 0x2f,
	0xc9, 0x2f, 0xd6, 0x2f, 0x28, 0x2d, 0xce, 0x28, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x03,
	0x0b, 0x09, 0x71, 0x23, 0x09, 0x29, 0x29, 0x72, 0x71, 0x07, 0x94, 0x16, 0x67, 0x04, 0xa5, 0x16,
	0x96, 0xa6, 0x16, 0x97, 0x08, 0x09, 0x71, 0xb1, 0xa4, 0x24, 0x96, 0x24, 0x4a, 0x30, 0x2a, 0x30,
	0x6a, 0x70, 0x06, 0x81, 0xd9, 0x4a, 0xc6, 0x5c, 0x9c, 0x10, 0x25, 0x05, 0x39, 0x95, 0x20, 0x05,
	0xc9, 0xf9, 0x29, 0xa9, 0x60, 0x05, 0xac, 0x41, 0x60, 0x36, 0x48, 0x2c, 0x33, 0x2f, 0x2d, 0x5f,
	0x82, 0x09, 0xa2, 0x09, 0xc4, 0x36, 0x9a, 0xc6, 0x08, 0x31, 0x38, 0x18, 0x62, 0x8f, 0x90, 0x03,
	0x17, 0x17, 0x88, 0xeb, 0x98, 0x5c, 0x92, 0x99, 0x9f, 0x27, 0x24, 0xa1, 0x87, 0xec, 0x2c, 0x24,
	0x07, 0x48, 0x89, 0x61, 0x91, 0x29, 0xc8, 0xa9, 0x54, 0x62, 0x10, 0x72, 0xe5, 0xe2, 0x76, 0xce,
	0xcf, 0xcb, 0x83, 0x19, 0x48, 0x86, 0x11, 0x1a, 0x8c, 0x06, 0x8c, 0x49, 0x6c, 0xe0, 0x40, 0x30,
	0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x8f, 0x66, 0x5f, 0x7c, 0x20, 0x01, 0x00, 0x00,
}
